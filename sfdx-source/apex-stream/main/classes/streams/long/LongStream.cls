/**
 * @author O. Berehovskyi
 * @group Iterables
 * @description A sequence of `Long` elements supporting aggregate operations,
 * a primitive specialization of {@link ObjectStream}.
 * @example
 * Long sumAnnualRevenueOfUniquePeopleFromLondon
 *     = ObjectStream.of(people)
 *         .filter(isPersonFromLondonPredicate)
 *         .distinct()
 *         .mapToLong(getAnnualRevenueToLongFunction)
 *         .sum();
 * @see LongSequence
 * @see SObjectStream
 * @see ObjectStream
 * @see DoubleStream
 * @see IntStream
 */
public virtual inherited sharing class LongStream extends LongIterable implements ILongIterable {

    private final Iterator<Long> iterator;

    /**
     * @description A flag defining whether this stream has been linked or consumed.
     */
    public Boolean isOperated { get { return isOperated; } protected set; } {
        isOperated = false;
    }

    protected LongStream() {
        this(new List<Long>().iterator());
    }

    protected LongStream(final Iterator<Long> iterator) {
        this.iterator = iterator;
    }

    /**
     * @description Returns an internal iterator for the elements of this stream.
     * <p>Terminal Operation.</p>
     * @return the internal `Iterator<Long>`
     * @throws IllegalArgumentException if this stream has been operated (linked or consumed)
     */
    public Iterator<Long> iterator() {
        Validate.isTrue(!isOperated, Label.StreamOperatedErrorMessage);
        try {
            return iterator;
        } finally {
            isOperated = true;
        }
    }

    //<editor-fold desc="Conversion Operations">
    // @start-group Conversion Operations
    /**
     * @description Returns an `ObjectStream` consisting of the elements of this stream, converted to Object.
     * @return the `ObjectStream`
     */
    public virtual IObjectIterable toObjectIterable() {
        return ObjectStream.of(iterator());
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Sources">
    // @start-group Sources
    /**
     * @description Returns a `LongStream` created from `iterator`.
     * @example
     * ILongIterable longStream = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 }.iterator());
     * ILongIterable longStream = LongStream.of(new Set<Long>{ 0, 5L, 1L, -10 }.iterator());
     * ILongIterable longStream = LongStream.of(otherStream.iterator());
     * @param iterator the iterator
     * @return the new `LongStream`
     * @throws NullPointerException if `iterator` is null
     */
    public static ILongIterable of(final Iterator<Long> iterator) {
        Validate.notNull(iterator);
        return new LongStream(iterator);
    }

    /**
     * @description Returns a `LongStream` created from `longs`.
     * @example
     * ILongIterable longStream = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 });
     * ILongIterable longStream = LongStream.of((Iterable<Long>) new Set<Long>{ 0, 5L, 1L, -10 });
     * @param longs the iterable
     * @return the new `LongStream`
     * @throws NullPointerException if `longs` is null
     */
    public static ILongIterable of(final Iterable<Long> longs) {
        Validate.notNull(longs);
        return new LongStream(longs.iterator());
    }

    /**
     * @description Returns a `LongStream` created from `longs` if non-null,
     * otherwise returns an empty `LongStream`.
     * @example
     * ILongIterable longStream = LongStream.ofNullable(new List<Long>{ 0, 5L, 1L, -10 });
     * @param longs the iterable
     * @return the new `LongStream` if `longs` is non-null,
     * otherwise an empty `LongStream`
     */
    public static ILongIterable ofNullable(final Iterable<Long> longs) {
        if (longs == null) { return empty(); }
        return new LongStream(longs.iterator());
    }

    /**
     * @description Returns an empty `LongStream`.
     * @return the empty `LongStream`
     */
    public static ILongIterable empty() {
        return new LongStream();
    }

    /**
     * @description Returns an ordered `LongStream` 
     * from `fromLong` (inclusive) to `toLong` (inclusive) by an incremental step of 1.
     * @example
     * ILongIterable longStreamFrom0To100 = LongStream.range(0, 100);
     * @param fromLong the inclusive initial value
     * @param toLong the inclusive upper bound
     * @return the new `LongStream`
     * @throws NullPointerException if `fromLong` or `toLong` is null
     */
    public static ILongIterable range(final Long fromLong, final Long toLong) {
        Validate.notNull(fromLong);
        Validate.notNull(toLong);
        return new LongStream(new LongRangeIterator(fromLong, toLong));
    }

    /**
     * @description Returns an infinite `LongStream` where each element is
     * generated by `supplier`.
     * @example 
     * ILongIterable fibonacciInfiniteStream = LongStream.generate(LongSupplier.fibonacci());
     * @param supplier the supplier of generated elements
     * @return the new `LongStream`
     * @throws NullPointerException if `supplier` is null
     */
    public static ILongIterable generate(final ILongSupplier supplier) {
        Validate.notNull(supplier);
        return new LongStream(new LongGenerator(supplier));
    }

    /**
     * @description Returns an infinite `LongStream` produced by iterative
     * application of `operator` to an initial element `seed`,
     * producing a `LongStream` consisting of `seed`, `operator(seed)`,
     * `operator(operator(seed))`, etc.
     * @example 
     * ILongIterable longIncrementalStream = LongStream.iterate(0L, LongUnaryOperator.add(1L));
     * @param seed the initial element
     * @param operator the operator to be applied to the previous element to produce a new element
     * @return the new `LongStream`
     * @throws NullPointerException if `supplier` is null
     */
    public static ILongIterable iterate(final Long seed, final ILongUnaryOperator operator) {
        Validate.notNull(operator);
        return new LongStream(new LongIterate(seed, operator));
    }

    /**
     * @description Returns an infinite `LongStream` produced by iterative
     * application of `operator` to an initial element `seed`,
     * conditioned on satisfying `predicate`.
     * @param seed the initial element
     * @param predicate the predicate to determine when the stream must be terminated
     * @param operator the operator to be applied to the previous element to produce a new element
     * @return the new `LongStream`
     * @throws NullPointerException if `supplier` or `supplier` is null
     */
    public static ILongIterable iterate(
            final Long seed,
            final ILongPredicate predicate,
            final ILongUnaryOperator operator
    ) {
        Validate.notNull(predicate);
        Validate.notNull(operator);
        return iterate(seed, operator).take(predicate);
    }

    /**
     * @description Returns eagerly concatenated `LongStream` whose elements are all the
     * elements of the first `ILongIterable` followed by all the elements of the
     * second `ILongIterable`.
     * @example
     * ILongIterable longStream = LongStream.concat(stream1, stream2);
     * @param iterable1 the first `ILongIterable`
     * @param iterable2 the second `ILongIterable`
     * @return the new `LongStream`
     * @throws NullPointerException if `iterable1` or `iterable2` is null
     */
    public static ILongIterable concat(final ILongIterable iterable1, final ILongIterable iterable2) {
        return concat(new List<ILongIterable>{ iterable1, iterable2 });
    }

    /**
     * @description Returns eagerly concatenates `List<ILongIterable>`.
     * @example
     * ILongIterable longStream = LongStream.concat(streams);
     * @param iterables the list of `ILongIterable`
     * @return the new `LongStream`
     * @throws NullPointerException if `iterables` or some of `ILongIterable` in a list is null
     */
    public static ILongIterable concat(final List<ILongIterable> iterables) {
        Validate.noNullElements(iterables);
        final List<Iterator<Long>> iterators = new List<Iterator<Long>>();
        final Iterator<ILongIterable> iterator = iterables.iterator();
        while (iterator.hasNext()) {
            final ILongIterable iterable = iterator.next();
            iterators.add(iterable.iterator());
        }
        return new LongStream(new LongConcatIterator(iterators));
    }

    /**
     * @description Returns a combined `LongStream` by applying `combiner` function
     * to each element at the same position.
     * @param iterable1 the first `ILongIterable`
     * @param iterable2 the second `ILongIterable`
     * @param combiner the binary operator to be applied to each element at the same position
     * @return the new `LongStream`
     * @throws NullPointerException if `iterable1`, `iterable2` or `combiner` is null
     */
    public static ILongIterable zip(
            final ILongIterable iterable1,
            final ILongIterable iterable2,
            final ILongBinaryOperator combiner
    ) {
        Validate.notNull(iterable1);
        Validate.notNull(iterable2);
        Validate.notNull(combiner);
        return new LongStream(new LongZipIterator(iterable1.iterator(), iterable2.iterator(), combiner));
    }

    /**
     * @description Returns new `LongStream` by appending `iterable`
     * to the current stream.
     * @example
     * ILongIterable longStream = stream1.append(stream2);
     * @param iterable the `ILongIterable` to append to the current stream
     * @return the new `LongStream`
     * @throws NullPointerException if `iterable` is null
     */
    public virtual ILongIterable append(final ILongIterable iterable) {
        return concat(this, iterable);
    }

    /**
     * @description Returns new `LongStream` by prepending `iterable`
     * to the current stream.
     * @example
     * ILongIterable longStream = stream1.prepend(stream2);
     * @param iterable the `ILongIterable` to prepend to the current stream
     * @return the new `LongStream`
     * @throws NullPointerException if `iterable` is null
     */
    public virtual ILongIterable prepend(final ILongIterable iterable) {
        return concat(iterable, this);
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Intermediate Operations">
    // @start-group Intermediate Operations
    /**
     * @description Returns new `LongSequence` from the current stream.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * ILongIterable longSeq = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 }).sequence();
     * @return the new `LongSequence`
     */
    public virtual ILongIterable sequence() {
        return LongSequence.of(Iterators.toLongList(iterator()));
    }

    /**
     * @description Returns a `LongStream` with elements that match `predicate`.
     * <p>Stateless Intermediate Operation.</p>
     * @example
     * List<Long> filtered = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .filter(LongPredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `LongStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual override ILongIterable filter(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        return new LongStream(new LongFilterIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `LongStream` which takes elements while elements match `predicate`.
     * <p>Short-circuiting Stateful Intermediate Operation.</p>
     * @example
     * List<Long> firstFiltered = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .take(LongPredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `LongStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual ILongIterable take(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        return new LongStream(new LongTakeIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `LongStream` which drops elements while elements match `predicate`,
     * then takes the rest.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Long> rest = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .drop(LongPredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `LongStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual ILongIterable drop(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        return new LongStream(new LongDropIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `LongStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @example
     * List<Long> incrementedLongs = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .mapTo(LongUnaryOperator.add(1L))
     *     .toList();
     * @param mapper the non-interfering, stateless operator
     * @return the `LongStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual ILongIterable mapTo(final ILongUnaryOperator mapper) {
        Validate.notNull(mapper);
        return new LongStream(new LongMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `IntStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `IntStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual override IIntIterable mapToInt(final ILongToIntFunction mapper) {
        Validate.notNull(mapper);
        return IntStream.of(new LongToIntMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `DoubleStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `DoubleStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual override IDoubleIterable mapToDouble(final ILongToDoubleFunction mapper) {
        Validate.notNull(mapper);
        return DoubleStream.of(new LongToDoubleIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `SObjectStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `SObjectStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual ISObjectIterable mapToSObject(final ILongToSObjectFunction mapper) {
        Validate.notNull(mapper);
        return SObjectStream.of(new LongToSObjectMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `ObjectStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `ObjectStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual IObjectIterable mapToObject(final ILongFunction mapper) {
        Validate.notNull(mapper);
        return ObjectStream.of(new LongToObjectMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `LongStream` after performing `consumer` action on each element.
     * <p>Stateless Intermediate Operation.</p>
     * @param consumer the non-interfering, stateless action to be performed on each element.
     * Expected to operate via side effects.
     * @return the `LongStream`
     * @throws NullPointerException if `consumer` is null
     */
    public virtual ILongIterable forEach(final ILongConsumer consumer) {
        Validate.notNull(consumer);
        return new LongStream(new LongForEachIterator(iterator(), consumer));
    }

    /**
     * @description Returns a `LongStream` with distinct elements.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Long> distinct = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .distinct()
     *     .toList();
     * @return the `LongStream`
     */
    public virtual ILongIterable distinct() {
        return new LongStream(new LongDistinctIterator(iterator()));
    }

    /**
     * @description Returns a `LongStream` with sorted elements in ascending order.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Long> sorted = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .sort()
     *     .toList();
     * @return the `LongStream`
     */
    public virtual ILongIterable sort() {
        final List<Long> longs = Iterators.toLongList(iterator());
        longs.sort();
        return new LongStream(longs.iterator());
    }

    /**
     * @description Returns a `LongStream` with first `lim` elements.
     * <p>Short-circuiting Stateful Intermediate Operation.</p>
     * @example
     * List<Long> first3Longs = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .lim(3)
     *     .toList();
     * @param lim the number of elements to limit
     * @return the `LongStream`
     * @throws NullPointerException if `lim` is null
     * @throws IllegalStateException if `lim` is less than 0
     */
    public virtual ILongIterable lim(final Integer lim) {
        Validate.notNull(lim);
        Validate.isTrue(lim >= 0, Label.ArgumentNotPositiveErrorMessage, new List<Object>{ lim });
        if (lim == 0) { return LongStream.empty(); }
        return new LongStream(new LongLimitIterator(iterator(), lim));
    }

    /**
     * @description Returns a new `LongStream` that skips first `n` elements
     * and returns remaining elements.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Long> restLongs = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .skip(1)
     *     .toList();
     * @param n the number of elements to skip
     * @return the `LongStream`
     * @throws NullPointerException if `n` is null
     * @throws IllegalStateException if `n` is less than 0
     */
    public virtual ILongIterable skip(final Integer n) {
        Validate.notNull(n);
        Validate.isTrue(n >= 0, Label.ArgumentNotPositiveErrorMessage, new List<Object>{ n });
        if (n == 0) { return new LongStream(iterator()); }
        return new LongStream(new LongSkipIterator(iterator(), n));
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Terminal Operations">
    // @start-group Terminal Operations
    /**
     * @description Performs a reduction on `Long` elements,
     * using `identity` value and an associative `accumulator` function, and returns the reduced value.
     * <p>Terminal Operation.</p>
     * @example
     * Long sum = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 }).reduce(0L, LongBinaryOperator.sum());
     * Long factorialOfN = LongStream.range(1, n).reduce(1, LongBinaryOperator.product());
     * @param identity the identity value for `accumulator`
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `Long` result of the reduction
     * @throws NullPointerException if `accumulator` is null
     */
    public virtual Long reduce(final Long identity, final ILongBinaryOperator accumulator) {
        Validate.notNull(accumulator);
        Long result = identity;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            result = accumulator.apply(result, iterator.next());
        }
        return result;
    }

    /**
     * @description Performs a reduction on `Long` elements,
     * using `identity` value and associative `accumulator` function, and returns
     * an `OptionalLong` describing the reduced value.
     * <p>Terminal Operation.</p>
     * @example
     * Long sum = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *      .reduce(LongBinaryOperator.sum())
     *      .get();
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `OptionalLong` result of the reduction
     * @throws NullPointerException if `accumulator` is null
     */
    public virtual override OptionalLong reduce(final ILongBinaryOperator accumulator) {
        Validate.notNull(accumulator);
        Boolean found = false;
        Long result;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            final Long value = iterator.next();
            if (!found) {
                found = true;
                result = value;
            } else {
                result = accumulator.apply(result, value);
            }
        }
        return found ? OptionalLong.ofNullable(result) : OptionalLong.empty();
    }

    /**
     * @description Performs a mutable reduction operation on elements, collecting elements
     * to a container returned by `supplier` by applying `accumulator` function.
     * <p>Terminal Operation.</p>
     * @param supplier the function that returns a mutable result container
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `Object` result of the collection
     * @throws NullPointerException if `supplier` or `accumulator` is null
     */
    public virtual Object collect(final ISupplier supplier, final IObjectLongConsumer accumulator) {
        Validate.notNull(supplier);
        Validate.notNull(accumulator);
        final Object container = supplier.get();
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            accumulator.accept(container, iterator.next());
        }
        return container;
    }

    /**
     * @description Returns an `OptionalLong` describing the first element
     * that matches `predicate`.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     * Long firstEvenLong = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .find(LongPredicate.isEven())
     *     .get();
     * @param predicate the predicate
     * @return the `OptionalLong`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual OptionalLong find(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        Long result;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            final Long l = iterator.next();
            if (predicate.test(l)) {
                result = l;
                break;
            }
        }
        return OptionalLong.ofNullable(result);
    }

    /**
     * @description Returns whether all elements match `predicate`.
     * If `LongStream` is empty then `false` is returned.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     * Boolean isEveryLongEven = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .every(LongPredicate.isEven())
     *     .get();
     * @param predicate the predicate
     * @return `true` or `false`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual Boolean every(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        return match(predicate, 1);
    }

    /**
     * @description Returns whether some element matches `predicate`.
     * If `LongStream` is empty then `false` is returned.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     * Boolean isSomeLongEven = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .some(LongPredicate.isEven())
     *     .get();
     * @param predicate the predicate
     * @return `true` or `false`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual override Boolean some(final ILongPredicate predicate) {
        Validate.notNull(predicate);
        return match(predicate, 0);
    }

    /**
     * @description Returns the sum of elements.
     * <p>Terminal Operation.</p>
     * @return the sum of elements
     */
    public virtual Long sum() {
        Long sum = 0;
        Integer i = 0;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            sum += iterator.next();
            i++;
        }
        return i == 0 ? null : sum;
    }

    /**
     * @description Returns `OptionalDouble` describing the arithmetic mean of elements of this stream, 
     * or an empty `OptionalDouble` if this stream is empty.
     * <p>Terminal Operation.</p>
     * @return the arithmetic mean of elements
     */
    public virtual OptionalDouble avg() {
        Double sum = 0.0;
        Integer i = 0;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            sum += iterator.next();
            i++;
        }
        return i == 0 ? OptionalDouble.empty() : OptionalDouble.of(sum / i);
    }

    /**
     * @description Returns the count of elements.
     * <p>Terminal Operation.</p>
     * @return the count of elements
     */
    public virtual Integer count() {
        Integer count = 0;
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            iterator.next();
            count++;
        }
        return count;
    }

    /**
     * @description Returns whether the count of elements is 0.
     * <p>Terminal Operation.</p>
     * @return `true` or `false`
     */
    public virtual Boolean isEmpty() {
        return !iterator().hasNext();
    }

    /**
     * @description Accumulates elements into a `List<Long>`.
     * <p>Terminal Operation.</p>
     * @example
     * List<Long> restLongs = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .skip(1)
     *     .toList();
     * @return the `List<Long>` containing the stream elements
     */
    public virtual List<Long> toList() {
        return Iterators.toLongList(iterator());
    }

    /**
     * @description Accumulates elements into a `Set<Long>`.
     * <p>Terminal Operation.</p>
     * @example
     * Set<Long> restLongs = LongStream.of(new List<Long>{ 0, 5L, 1L, -10 })
     *     .skip(1)
     *     .toSet();
     * @return the `Set<Long>` containing the stream elements
     */
    public virtual Set<Long> toSet() {
        return Iterators.toLongSet(iterator());
    }

    private Boolean match(final ILongPredicate predicate, final Integer kind) {
        final Boolean isSome = (kind == 0); // some
        final Boolean isEvery = (kind == 1); // every
        final Iterator<Long> iterator = iterator();
        while (iterator.hasNext()) {
            final Boolean isMatched = predicate.test(iterator.next());
            if (isMatched ^ isEvery) {
                return isSome && isMatched;
            }
        }
        return !isSome;
    }
    // @end-group
    //</editor-fold>

}
