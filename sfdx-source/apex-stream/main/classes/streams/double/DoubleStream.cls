/**
 * @author O. Berehovskyi
 * @group Iterables
 * @description A sequence of `Double` elements supporting aggregate operations,
 * a primitive specialization of {@link ObjectStream}.
 * <p><a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo method</a></p>
 * @example
 * // Approximating the value of π using Monte Carlo method and streams
 * Integer s = 200000;
 * IDoubleIterable x = DoubleStream.generate(DoubleSupplier.random());
 * IDoubleIterable y = DoubleStream.generate(DoubleSupplier.random());
 * IDoubleBinaryOperator euclidean = DoubleBinaryOperator.euclideanDistance();
 * // The number of points inside the quadrant,
 * // i.e. having a distance from the origin of less than 1
 * Integer n = DoubleStream.zip(x, y, euclidean)
 *       .lim(s)
 *       .filter(DoublePredicate.isLess(1))
 *       .count();
 * // The ratio of the inside-count and the total-sample-count is an estimate of the ratio
 * // of the two areas, π / 4. Multiply the result by 4 to estimate π.
 * Double approxPi = 4 * n / (Double) s;
 * @see DoubleSequence
 * @see SObjectStream
 * @see ObjectStream
 * @see IntStream
 * @see LongStream
 */
public virtual inherited sharing class DoubleStream extends DoubleIterable implements IDoubleIterable {

    private final Iterator<Double> iterator;

    /**
     * @description A flag defining whether this stream has been linked or consumed.
     */
    public Boolean isOperated { get { return isOperated; } protected set; } {
        isOperated = false;
    }

    protected DoubleStream() {
        this(new List<Double>().iterator());
    }

    protected DoubleStream(final Iterator<Double> iterator) {
        this.iterator = iterator;
    }

    /**
     * @description Returns an internal iterator for the elements of this stream.
     * <p>Terminal Operation.</p>
     * @return the internal `Iterator<Double>`
     * @throws IllegalArgumentException if this stream has been operated (linked or consumed)
     */
    public Iterator<Double> iterator() {
        Validate.isTrue(!isOperated, Label.StreamOperatedErrorMessage);
        try {
            return iterator;
        } finally {
            isOperated = true;
        }
    }

    //<editor-fold desc="Conversion Operations">
    // @start-group Conversion Operations
    /**
     * @description Returns an `ObjectStream` consisting of the elements of this stream, converted to Object.
     * @return the `ObjectStream`
     */
    public virtual IObjectIterable toObjectIterable() {
        return ObjectStream.of(iterator());
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Sources">
    // @start-group Sources
    /**
     * @description Returns a `DoubleStream` created from `iterator`.
     * @example
     * IDoubleIterable doubleStream = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI }.iterator());
     * IDoubleIterable doubleStream = DoubleStream.of(new Set<Double>{ 0.1, 5, 1.5, Math.PI }.iterator());
     * IDoubleIterable doubleStream = DoubleStream.of(otherStream.iterator());
     * @param iterator the iterator
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterator` is null
     */
    public static IDoubleIterable of(final Iterator<Double> iterator) {
        Validate.notNull(iterator);
        return new DoubleStream(iterator);
    }

    /**
     * @description Returns a `DoubleStream` created from `doubles`.
     * @example
     * IDoubleIterable doubleStream = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI });
     * IDoubleIterable doubleStream = DoubleStream.of((Iterable<Double>) new Set<Double>{ 0.1, 5, 1.5, Math.PI });
     * @param doubles the iterable
     * @return the new `DoubleStream`
     * @throws NullPointerException if `doubles` is null
     */
    public static IDoubleIterable of(final Iterable<Double> doubles) {
        Validate.notNull(doubles);
        return new DoubleStream(doubles.iterator());
    }

    /**
     * @description Returns a `DoubleStream` created from `doubles` if non-null,
     * otherwise returns an empty `DoubleStream`.
     * @example
     * IDoubleIterable doubleStream = DoubleStream.ofNullable(new List<Double>{ 0.1, 5, 1.5, Math.PI });
     * @param doubles the iterable
     * @return the new `DoubleStream` if `doubles` is non-null,
     * otherwise an empty `DoubleStream`
     */
    public static IDoubleIterable ofNullable(final Iterable<Double> doubles) {
        if (doubles == null) { return empty(); }
        return new DoubleStream(doubles.iterator());
    }

    /**
     * @description Returns an empty `DoubleStream`.
     * @return the empty `DoubleStream`
     */
    public static IDoubleIterable empty() {
        return new DoubleStream();
    }

    /**
     * @description Returns an infinite `DoubleStream` where each element is
     * generated by `supplier`.
     * @example 
     * IDoubleIterable randomStream = DoubleStream.generate(DoubleSupplier.random());
     * @param supplier the supplier of generated elements
     * @return the new `DoubleStream`
     * @throws NullPointerException if `supplier` is null
     */
    public static IDoubleIterable generate(final IDoubleSupplier supplier) {
        Validate.notNull(supplier);
        return new DoubleStream(new DoubleGenerator(supplier));
    }

    /**
     * @description Returns an infinite `DoubleStream` produced by iterative
     * application of `operator` to an initial element `seed`,
     * producing a `DoubleStream` consisting of `seed`, `operator(seed)`,
     * `operator(operator(seed))`, etc.
     * @example 
     * IDoubleIterable doubleIncrementalStream = DoubleStream.iterate(0, DoubleUnaryOperator.add(1));
     * @param seed the initial element
     * @param operator the operator to be applied to the previous element to produce a new element
     * @return the new `DoubleStream`
     * @throws NullPointerException if `supplier` is null
     */
    public static IDoubleIterable iterate(final Double seed, final IDoubleUnaryOperator operator) {
        Validate.notNull(operator);
        return new DoubleStream(new DoubleIterate(seed, operator));
    }

    /**
     * @description Returns an infinite `DoubleStream` produced by iterative
     * application of `operator` to an initial element `seed`,
     * conditioned on satisfying `predicate`.
     * @param seed the initial element
     * @param predicate the predicate to determine when the stream must be terminated
     * @param operator the operator to be applied to the previous element to produce a new element
     * @return the new `DoubleStream`
     * @throws NullPointerException if `supplier` or `supplier` is null
     */
    public static IDoubleIterable iterate(
            final Double seed,
            final IDoublePredicate predicate,
            final IDoubleUnaryOperator operator
    ) {
        Validate.notNull(predicate);
        Validate.notNull(operator);
        return iterate(seed, operator).take(predicate);
    }

    /**
     * @description Returns eagerly concatenated `DoubleStream` whose elements are all the
     * elements of the first `IDoubleIterable` followed by all the elements of the
     * second `IDoubleIterable`.
     * @example
     * IDoubleIterable doubleStream = DoubleStream.concat(stream1, stream2);
     * @param iterable1 the first `IDoubleIterable`
     * @param iterable2 the second `IDoubleIterable`
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterable1` or `iterable2` is null
     */
    public static IDoubleIterable concat(final IDoubleIterable iterable1, final IDoubleIterable iterable2) {
        return concat(new List<IDoubleIterable>{ iterable1, iterable2 });
    }

    /**
     * @description Returns eagerly concatenates `List<IDoubleIterable>`.
     * @example
     * IDoubleIterable doubleStream = DoubleStream.concat(streams);
     * @param iterables the list of `IDoubleIterable`
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterables` or some of `IDoubleIterable` in a list is null
     */
    public static IDoubleIterable concat(final List<IDoubleIterable> iterables) {
        Validate.noNullElements(iterables);
        final List<Iterator<Double>> iterators = new List<Iterator<Double>>();
        final Iterator<IDoubleIterable> iterator = iterables.iterator();
        while (iterator.hasNext()) {
            final IDoubleIterable iterable = iterator.next();
            iterators.add(iterable.iterator());
        }
        return new DoubleStream(new DoubleConcatIterator(iterators));
    }

    /**
     * @description Returns a combined `DoubleStream` by applying `combiner` function
     * to each element at the same position.
     * @param iterable1 the first `IDoubleIterable`
     * @param iterable2 the second `IDoubleIterable`
     * @param combiner the binary operator to be applied to each element at the same position
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterable1`, `iterable2` or `combiner` is null
     */
    public static IDoubleIterable zip(
            final IDoubleIterable iterable1,
            final IDoubleIterable iterable2,
            final IDoubleBinaryOperator combiner
    ) {
        Validate.notNull(iterable1);
        Validate.notNull(iterable2);
        Validate.notNull(combiner);
        return new DoubleStream(new DoubleZipIterator(iterable1.iterator(), iterable2.iterator(), combiner));
    }

    /**
     * @description Returns new `DoubleStream` by appending `iterable`
     * to the current stream.
     * @example
     * IDoubleIterable doubleStream = stream1.append(stream2);
     * @param iterable the `IDoubleIterable` to append to the current stream
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterable` is null
     */
    public virtual IDoubleIterable append(final IDoubleIterable iterable) {
        return concat(this, iterable);
    }

    /**
     * @description Returns new `DoubleStream` by prepending `iterable`
     * to the current stream.
     * @example
     * IDoubleIterable doubleStream = stream1.prepend(stream2);
     * @param iterable the `IDoubleIterable` to prepend to the current stream
     * @return the new `DoubleStream`
     * @throws NullPointerException if `iterable` is null
     */
    public virtual IDoubleIterable prepend(final IDoubleIterable iterable) {
        return concat(iterable, this);
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Intermediate Operations">
    // @start-group Intermediate Operations
    /**
     * @description Returns new `DoubleSequence` from the current stream.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * IDoubleIterable doubleSeq = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI }).sequence();
     * @return the new `DoubleSequence`
     */
    public virtual IDoubleIterable sequence() {
        return DoubleSequence.of(Iterators.toDoubleList(iterator()));
    }

    /**
     * @description Returns a `DoubleStream` with elements that match `predicate`.
     * <p>Stateless Intermediate Operation.</p>
     * @example
     * List<Double> filtered = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .filter(DoublePredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `DoubleStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual override IDoubleIterable filter(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        return new DoubleStream(new DoubleFilterIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `DoubleStream` which takes elements while elements match `predicate`.
     * <p>Short-circuiting Stateful Intermediate Operation.</p>
     * @example
     * List<Double> firstFiltered = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .take(DoublePredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `DoubleStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual IDoubleIterable take(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        return new DoubleStream(new DoubleTakeIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `DoubleStream` which drops elements while elements match `predicate`,
     * then takes the rest.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Double> rest = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .drop(DoublePredicate.isGreater(0))
     *     .toList();
     * @param predicate the non-interfering, stateless predicate
     * @return the `DoubleStream`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual IDoubleIterable drop(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        return new DoubleStream(new DoubleDropIterator(iterator(), predicate));
    }

    /**
     * @description Returns a `DoubleStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @example
     * List<Double> incrementedDoubles = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .mapTo(DoubleUnaryOperator.add(1.5))
     *     .toList();
     * @param mapper the non-interfering, stateless operator
     * @return the `DoubleStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual IDoubleIterable mapTo(final IDoubleUnaryOperator mapper) {
        Validate.notNull(mapper);
        return new DoubleStream(new DoubleMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `IntStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `IntStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual IIntIterable mapToInt(final IDoubleToIntFunction mapper) {
        Validate.notNull(mapper);
        return IntStream.of(new DoubleToIntMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `LongStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `LongStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual ILongIterable mapToLong(final IDoubleToLongFunction mapper) {
        Validate.notNull(mapper);
        return LongStream.of(new DoubleToLongMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `SObjectStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `SObjectStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual ISObjectIterable mapToSObject(final IDoubleToSObjectFunction mapper) {
        Validate.notNull(mapper);
        return SObjectStream.of(new DoubleToSObjectMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `ObjectStream` with elements returned by `mapper` function,
     * applied to the elements of this stream.
     * <p>Stateless Intermediate Operation.</p>
     * @param mapper the non-interfering, stateless operator
     * @return the `ObjectStream`
     * @throws NullPointerException if `mapper` is null
     */
    public virtual IObjectIterable mapToObject(final IDoubleFunction mapper) {
        Validate.notNull(mapper);
        return ObjectStream.of(new DoubleToObjectMapIterator(iterator(), mapper));
    }

    /**
     * @description Returns a `DoubleStream` after performing `consumer` action on each element.
     * <p>Stateless Intermediate Operation.</p>
     * @param consumer the non-interfering, stateless action to be performed on each element.
     * Expected to operate via side effects.
     * @return the `DoubleStream`
     * @throws NullPointerException if `consumer` is null
     */
    public virtual IDoubleIterable forEach(final IDoubleConsumer consumer) {
        Validate.notNull(consumer);
        return new DoubleStream(new DoubleForEachIterator(iterator(), consumer));
    }

    /**
     * @description Returns a `DoubleStream` with distinct elements.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Double> distinct = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .distinct()
     *     .toList();
     * @return the `DoubleStream`
     */
    public virtual IDoubleIterable distinct() {
        return new DoubleStream(new DoubleDistinctIterator(iterator()));
    }

    /**
     * @description Returns a `DoubleStream` with sorted elements in ascending order.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Double> sorted = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .sort()
     *     .toList();
     * @return the `DoubleStream`
     */
    public virtual IDoubleIterable sort() {
        final List<Double> doubles = Iterators.toDoubleList(iterator());
        doubles.sort();
        return new DoubleStream(doubles.iterator());
    }

    /**
     * @description Returns a `DoubleStream` with first `lim` elements.
     * <p>Short-circuiting Stateful Intermediate Operation.</p>
     * @example
     * List<Double> first3Doubles = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .lim(3)
     *     .toList();
     * @param lim the number of elements to limit
     * @return the `DoubleStream`
     * @throws NullPointerException if `lim` is null
     * @throws IllegalStateException if `lim` is less than 0
     */
    public virtual IDoubleIterable lim(final Integer lim) {
        Validate.notNull(lim);
        Validate.isTrue(lim >= 0, Label.ArgumentNotPositiveErrorMessage, new List<Object>{ lim });
        if (lim == 0) { return DoubleStream.empty(); }
        return new DoubleStream(new DoubleLimitIterator(iterator(), lim));
    }

    /**
     * @description Returns a new `DoubleStream` that skips first `n` elements
     * and returns remaining elements.
     * <p>Stateful Intermediate Operation.</p>
     * @example
     * List<Double> restDoubles = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .skip(1)
     *     .toList();
     * @param n the number of elements to skip
     * @return the `DoubleStream`
     * @throws NullPointerException if `n` is null
     * @throws IllegalStateException if `n` is less than 0
     */
    public virtual IDoubleIterable skip(final Integer n) {
        Validate.notNull(n);
        Validate.isTrue(n >= 0, Label.ArgumentNotPositiveErrorMessage, new List<Object>{ n });
        if (n == 0) { return new DoubleStream(iterator()); }
        return new DoubleStream(new DoubleSkipIterator(iterator(), n));
    }
    // @end-group
    //</editor-fold>

    //<editor-fold desc="Terminal Operations">
    // @start-group Terminal Operations
    /**
     * @description Performs a reduction on `Double` elements,
     * using `identity` value and an associative `accumulator` function, and returns the reduced value.
     * <p>Terminal Operation.</p>
     * @example
     * Double naiveSum = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI }).reduce(0.0, DoubleBinaryOperator.sum());
     * @param identity the identity value for `accumulator`
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `Double` result of the reduction
     * @throws NullPointerException if `accumulator` is null
     */
    public virtual Double reduce(final Double identity, final IDoubleBinaryOperator accumulator) {
        Validate.notNull(accumulator);
        Double result = identity;
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            result = accumulator.apply(result, iterator.next());
        }
        return result;
    }

    /**
     * @description Performs a reduction on `Double` elements,
     * using `identity` value and associative `accumulator` function, and returns
     * an `OptionalDouble` describing the reduced value.
     * <p>Terminal Operation.</p>
     * @example
     * Double naiveSum = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *      .reduce(DoubleBinaryOperator.sum())
     *      .get();
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `OptionalDouble` result of the reduction
     * @throws NullPointerException if `accumulator` is null
     */
    public virtual override OptionalDouble reduce(final IDoubleBinaryOperator accumulator) {
        Validate.notNull(accumulator);
        Boolean found = false;
        Double result;
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            final Double value = iterator.next();
            if (!found) {
                found = true;
                result = value;
            } else {
                result = accumulator.apply(result, value);
            }
        }
        return found ? OptionalDouble.of(result) : OptionalDouble.empty();
    }

    /**
     * @description Performs a mutable reduction operation on elements, collecting elements
     * to a container returned by `supplier` by applying `accumulator` function.
     * <p>Terminal Operation.</p>
     * @param supplier the function that returns a mutable result container
     * @param accumulator the associative, non-interfering, stateless accumulation function
     * @return the `Object` result of the collection
     * @throws NullPointerException if `supplier` or `accumulator` is null
     */
    public virtual override Object collect(final ISupplier supplier, final IObjectDoubleConsumer accumulator) {
        Validate.notNull(supplier);
        Validate.notNull(accumulator);
        final Object container = supplier.get();
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            accumulator.accept(container, iterator.next());
        }
        return container;
    }

    /**
     * @description Returns an `OptionalDouble` describing the first element
     * that matches `predicate`.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     * Double firstGreaterDouble = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .find(DoublePredicate.isGreater(1.5))
     *     .get();
     * @param predicate the predicate
     * @return the `OptionalDouble`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual OptionalDouble find(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        Double result;
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            final Double d = iterator.next();
            if (predicate.test(d)) {
                result = d;
                break;
            }
        }
        return OptionalDouble.ofNullable(result);
    }

    /**
     * @description Returns whether all elements match `predicate`.
     * If `DoubleStream` is empty then `false` is returned.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     * Boolean isEveryDoubleGreater = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .every(DoublePredicate.isGreater(1.5))
     *     .get();
     * @param predicate the predicate
     * @return `true` or `false`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual Boolean every(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        return match(predicate, 1);
    }

    /**
     * @description Returns whether some element matches `predicate`.
     * If `DoubleStream` is empty then `false` is returned.
     * <p>Short-circuiting Terminal Operation.</p>
     * @example
     *  Boolean isSomeDoubleGreater = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .some(DoublePredicate.isGreater(1.5))
     *     .get();
     * @param predicate the predicate
     * @return `true` or `false`
     * @throws NullPointerException if `predicate` is null
     */
    public virtual override Boolean some(final IDoublePredicate predicate) {
        Validate.notNull(predicate);
        return match(predicate, 0);
    }

    /**
     * @description Returns the count of elements.
     * <p>Terminal Operation.</p>
     * @return the count of elements
     */
    public virtual Integer count() {
        Integer count = 0;
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            iterator.next();
            count++;
        }
        return count;
    }

    /**
     * @description Returns whether the count of elements is 0.
     * <p>Terminal Operation.</p>
     * @return `true` or `false`
     */
    public virtual Boolean isEmpty() {
        return !iterator().hasNext();
    }

    /**
     * @description Accumulates elements into a `List<Double>`.
     * <p>Terminal Operation.</p>
     * @example
     * List<Double> restDoubles = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .skip(1)
     *     .toList();
     * @return the `List<Double>` containing the stream elements
     */
    public virtual List<Double> toList() {
        return Iterators.toDoubleList(iterator());
    }

    /**
     * @description Accumulates elements into a `Set<Double>`.
     * <p>Terminal Operation.</p>
     * @example
     * Set<Double> restDoubles = DoubleStream.of(new List<Double>{ 0.1, 5, 1.5, Math.PI })
     *     .skip(1)
     *     .toSett();
     * @return the `Set<Double>` containing the stream elements
     */
    public virtual Set<Double> toSet() {
        return Iterators.toDoubleSet(iterator());
    }

    private Boolean match(final IDoublePredicate predicate, final Integer kind) {
        final Boolean isSome = (kind == 0); // some
        final Boolean isEvery = (kind == 1); // every
        final Iterator<Double> iterator = iterator();
        while (iterator.hasNext()) {
            final Boolean isMatched = predicate.test(iterator.next());
            if (isMatched ^ isEvery) {
                return isSome && isMatched;
            }
        }
        return !isSome;
    }
    // @end-group
    //</editor-fold>

}
