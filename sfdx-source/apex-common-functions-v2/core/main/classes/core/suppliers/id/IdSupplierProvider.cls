/**
 * @description A provider class that supplies `Supplier` instances for generating sequential `Id` values
 * for a given `SObjectType`. Each supplier generated by this class returns a new, unique Id value
 * for the specified SObject type, following Salesforce's 15-character Id format.
 *
 * @example
 * ISupplier accIdSupplier = new IdSupplierProvider().of(Account.SObjectType);
 * accIdSupplier.get(); // '001000000000000AAA'
 * accIdSupplier.get(); // '001000000000001AAA'
 */
public virtual inherited sharing class IdSupplierProvider {
    /**
     * @description Returns a `Supplier` that returns the next `Id` value
     * for the given `sObjectType`.
     * <p><strong>Note: </strong></p>
     * <p>This is a stateful function.</p>
     *
     * @param sObjectType SObjectType of the new id to create
     *
     * @return the `Supplier`
     *
     * @throws NullPointerException if `sObjectType` is null
     *
     * @example
     * ISupplier accIdSupplier = new IdSupplierProvider().of(Account.SObjectType);
     * accIdSupplier.get(); // '001000000000000AAA'
     * accIdSupplier.get(); // '001000000000001AAA'
     */
    public virtual Supplier of(final SObjectType sObjectType) {
        return new IdOfTypeSupplier(sObjectType);
    }

    private class IdOfTypeSupplier extends Supplier {
        private Integer i = 0;
        private final String keyPrefix;
        private final String placeholder = '000000000000';
        private IdOfTypeSupplier(SObjectType sObjectType) {
            Validate.notNull(sObjectType);
            keyPrefix = sObjectType.getDescribe().getKeyPrefix();
        }
        public override Object get() {
            return Id.valueOf(
                keyPrefix
                + placeholder.substring(0, 12 - String.valueOf(i).length())
                + i++
            );
        }
    }
}
